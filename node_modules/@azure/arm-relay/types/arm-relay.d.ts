import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/** Namespace/Relay Connection String */
export declare interface AccessKeys {
    /** Primary connection string of the created namespace authorization rule. */
    primaryConnectionString?: string;
    /** Secondary connection string of the created namespace authorization rule. */
    secondaryConnectionString?: string;
    /** A base64-encoded 256-bit primary key for signing and validating the SAS token. */
    primaryKey?: string;
    /** A base64-encoded 256-bit secondary key for signing and validating the SAS token. */
    secondaryKey?: string;
    /** A string that describes the authorization rule. */
    keyName?: string;
}

/** Defines values for AccessRights. */
export declare type AccessRights = "Manage" | "Send" | "Listen";

/** Description of a namespace authorization rule. */
export declare interface AuthorizationRule extends Resource {
    /** The rights associated with the rule. */
    rights: AccessRights[];
}

/** The response from the list namespace operation. */
export declare interface AuthorizationRuleListResult {
    /** Result of the list authorization rules operation. */
    value?: AuthorizationRule[];
    /** Link to the next set of results. Not empty if value contains incomplete list of authorization rules. */
    nextLink?: string;
}

/** Description of the check name availability request properties. */
export declare interface CheckNameAvailability {
    /** The namespace name to check for availability. The namespace name can contain only letters, numbers, and hyphens. The namespace must start with a letter, and it must end with a letter or number. */
    name: string;
}

/** Description of the check name availability request properties. */
export declare interface CheckNameAvailabilityResult {
    /**
     * The detailed info regarding the reason associated with the namespace.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /** Value indicating namespace is available. Returns true if the namespace is available; otherwise, false. */
    nameAvailable?: boolean;
    /** The reason for unavailability of a namespace. */
    reason?: UnavailableReason;
}

/** Error reponse indicates Relay service is not able to process the incoming request. The reason is provided in the error message. */
export declare interface ErrorResponse {
    /** Error code. */
    code?: string;
    /** Error message indicating why the operation failed. */
    message?: string;
}

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Description of hybrid connection resource. */
export declare interface HybridConnection extends Resource {
    /**
     * The time the hybrid connection was created.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdAt?: Date;
    /**
     * The time the namespace was updated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly updatedAt?: Date;
    /**
     * The number of listeners for this hybrid connection. Note that min : 1 and max:25 are supported.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly listenerCount?: number;
    /** Returns true if client authorization is needed for this hybrid connection; otherwise, false. */
    requiresClientAuthorization?: boolean;
    /** The usermetadata is a placeholder to store user-defined string data for the hybrid connection endpoint. For example, it can be used to store descriptive data, such as a list of teams and their contact information. Also, user-defined configuration settings can be stored. */
    userMetadata?: string;
}

/** The response of the list hybrid connection operation. */
export declare interface HybridConnectionListResult {
    /** Result of the list hybrid connections. */
    value?: HybridConnection[];
    /** Link to the next set of results. Not empty if value contains incomplete list hybrid connection operation. */
    nextLink?: string;
}

/** Interface representing a HybridConnections. */
export declare interface HybridConnections {
    /**
     * Lists the hybrid connection within the namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    listByNamespace(resourceGroupName: string, namespaceName: string, options?: HybridConnectionsListByNamespaceOptionalParams): PagedAsyncIterableIterator<HybridConnection>;
    /**
     * Authorization rules for a hybrid connection.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param hybridConnectionName The hybrid connection name.
     * @param options The options parameters.
     */
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, options?: HybridConnectionsListAuthorizationRulesOptionalParams): PagedAsyncIterableIterator<AuthorizationRule>;
    /**
     * Creates or updates a service hybrid connection. This operation is idempotent.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param hybridConnectionName The hybrid connection name.
     * @param parameters Parameters supplied to create a hybrid connection.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, parameters: HybridConnection, options?: HybridConnectionsCreateOrUpdateOptionalParams): Promise<HybridConnectionsCreateOrUpdateResponse>;
    /**
     * Deletes a hybrid connection.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param hybridConnectionName The hybrid connection name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, options?: HybridConnectionsDeleteOptionalParams): Promise<void>;
    /**
     * Returns the description for the specified hybrid connection.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param hybridConnectionName The hybrid connection name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, options?: HybridConnectionsGetOptionalParams): Promise<HybridConnectionsGetResponse>;
    /**
     * Creates or updates an authorization rule for a hybrid connection.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param hybridConnectionName The hybrid connection name.
     * @param authorizationRuleName The authorization rule name.
     * @param parameters The authorization rule parameters.
     * @param options The options parameters.
     */
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, authorizationRuleName: string, parameters: AuthorizationRule, options?: HybridConnectionsCreateOrUpdateAuthorizationRuleOptionalParams): Promise<HybridConnectionsCreateOrUpdateAuthorizationRuleResponse>;
    /**
     * Deletes a hybrid connection authorization rule.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param hybridConnectionName The hybrid connection name.
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, authorizationRuleName: string, options?: HybridConnectionsDeleteAuthorizationRuleOptionalParams): Promise<void>;
    /**
     * Hybrid connection authorization rule for a hybrid connection by name.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param hybridConnectionName The hybrid connection name.
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, authorizationRuleName: string, options?: HybridConnectionsGetAuthorizationRuleOptionalParams): Promise<HybridConnectionsGetAuthorizationRuleResponse>;
    /**
     * Primary and secondary connection strings to the hybrid connection.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param hybridConnectionName The hybrid connection name.
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    listKeys(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, authorizationRuleName: string, options?: HybridConnectionsListKeysOptionalParams): Promise<HybridConnectionsListKeysResponse>;
    /**
     * Regenerates the primary or secondary connection strings to the hybrid connection.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param hybridConnectionName The hybrid connection name.
     * @param authorizationRuleName The authorization rule name.
     * @param parameters Parameters supplied to regenerate authorization rule.
     * @param options The options parameters.
     */
    regenerateKeys(resourceGroupName: string, namespaceName: string, hybridConnectionName: string, authorizationRuleName: string, parameters: RegenerateAccessKeyParameters, options?: HybridConnectionsRegenerateKeysOptionalParams): Promise<HybridConnectionsRegenerateKeysResponse>;
}

/** Optional parameters. */
export declare interface HybridConnectionsCreateOrUpdateAuthorizationRuleOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdateAuthorizationRule operation. */
export declare type HybridConnectionsCreateOrUpdateAuthorizationRuleResponse = AuthorizationRule;

/** Optional parameters. */
export declare interface HybridConnectionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type HybridConnectionsCreateOrUpdateResponse = HybridConnection;

/** Optional parameters. */
export declare interface HybridConnectionsDeleteAuthorizationRuleOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface HybridConnectionsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface HybridConnectionsGetAuthorizationRuleOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getAuthorizationRule operation. */
export declare type HybridConnectionsGetAuthorizationRuleResponse = AuthorizationRule;

/** Optional parameters. */
export declare interface HybridConnectionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type HybridConnectionsGetResponse = HybridConnection;

/** Optional parameters. */
export declare interface HybridConnectionsListAuthorizationRulesNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAuthorizationRulesNext operation. */
export declare type HybridConnectionsListAuthorizationRulesNextResponse = AuthorizationRuleListResult;

/** Optional parameters. */
export declare interface HybridConnectionsListAuthorizationRulesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAuthorizationRules operation. */
export declare type HybridConnectionsListAuthorizationRulesResponse = AuthorizationRuleListResult;

/** Optional parameters. */
export declare interface HybridConnectionsListByNamespaceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByNamespaceNext operation. */
export declare type HybridConnectionsListByNamespaceNextResponse = HybridConnectionListResult;

/** Optional parameters. */
export declare interface HybridConnectionsListByNamespaceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByNamespace operation. */
export declare type HybridConnectionsListByNamespaceResponse = HybridConnectionListResult;

/** Optional parameters. */
export declare interface HybridConnectionsListKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listKeys operation. */
export declare type HybridConnectionsListKeysResponse = AccessKeys;

/** Optional parameters. */
export declare interface HybridConnectionsRegenerateKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the regenerateKeys operation. */
export declare type HybridConnectionsRegenerateKeysResponse = AccessKeys;

/** Defines values for KeyType. */
declare type KeyType_2 = "PrimaryKey" | "SecondaryKey";
export { KeyType_2 as KeyType }

/** Interface representing a Namespaces. */
export declare interface Namespaces {
    /**
     * Lists all the available namespaces within the subscription regardless of the resourceGroups.
     * @param options The options parameters.
     */
    list(options?: NamespacesListOptionalParams): PagedAsyncIterableIterator<RelayNamespace>;
    /**
     * Lists all the available namespaces within the ResourceGroup.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: NamespacesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<RelayNamespace>;
    /**
     * Authorization rules for a namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, options?: NamespacesListAuthorizationRulesOptionalParams): PagedAsyncIterableIterator<AuthorizationRule>;
    /**
     * Check the specified namespace name availability.
     * @param parameters Parameters to check availability of the specified namespace name.
     * @param options The options parameters.
     */
    checkNameAvailability(parameters: CheckNameAvailability, options?: NamespacesCheckNameAvailabilityOptionalParams): Promise<NamespacesCheckNameAvailabilityResponse>;
    /**
     * Create Azure Relay namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param parameters Parameters supplied to create a namespace resource.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, namespaceName: string, parameters: RelayNamespace, options?: NamespacesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<NamespacesCreateOrUpdateResponse>, NamespacesCreateOrUpdateResponse>>;
    /**
     * Create Azure Relay namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param parameters Parameters supplied to create a namespace resource.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, namespaceName: string, parameters: RelayNamespace, options?: NamespacesCreateOrUpdateOptionalParams): Promise<NamespacesCreateOrUpdateResponse>;
    /**
     * Deletes an existing namespace. This operation also removes all associated resources under the
     * namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, namespaceName: string, options?: NamespacesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes an existing namespace. This operation also removes all associated resources under the
     * namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, namespaceName: string, options?: NamespacesDeleteOptionalParams): Promise<void>;
    /**
     * Returns the description for the specified namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, namespaceName: string, options?: NamespacesGetOptionalParams): Promise<NamespacesGetResponse>;
    /**
     * Creates or updates a namespace. Once created, this namespace's resource manifest is immutable. This
     * operation is idempotent.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param parameters Parameters for updating a namespace resource.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, namespaceName: string, parameters: RelayUpdateParameters, options?: NamespacesUpdateOptionalParams): Promise<NamespacesUpdateResponse>;
    /**
     * Creates or updates an authorization rule for a namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param authorizationRuleName The authorization rule name.
     * @param parameters The authorization rule parameters.
     * @param options The options parameters.
     */
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: AuthorizationRule, options?: NamespacesCreateOrUpdateAuthorizationRuleOptionalParams): Promise<NamespacesCreateOrUpdateAuthorizationRuleResponse>;
    /**
     * Deletes a namespace authorization rule.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options?: NamespacesDeleteAuthorizationRuleOptionalParams): Promise<void>;
    /**
     * Authorization rule for a namespace by name.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options?: NamespacesGetAuthorizationRuleOptionalParams): Promise<NamespacesGetAuthorizationRuleResponse>;
    /**
     * Primary and secondary connection strings to the namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    listKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options?: NamespacesListKeysOptionalParams): Promise<NamespacesListKeysResponse>;
    /**
     * Regenerates the primary or secondary connection strings to the namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param authorizationRuleName The authorization rule name.
     * @param parameters Parameters supplied to regenerate authorization rule.
     * @param options The options parameters.
     */
    regenerateKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: RegenerateAccessKeyParameters, options?: NamespacesRegenerateKeysOptionalParams): Promise<NamespacesRegenerateKeysResponse>;
}

/** Optional parameters. */
export declare interface NamespacesCheckNameAvailabilityOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkNameAvailability operation. */
export declare type NamespacesCheckNameAvailabilityResponse = CheckNameAvailabilityResult;

/** Optional parameters. */
export declare interface NamespacesCreateOrUpdateAuthorizationRuleOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdateAuthorizationRule operation. */
export declare type NamespacesCreateOrUpdateAuthorizationRuleResponse = AuthorizationRule;

/** Optional parameters. */
export declare interface NamespacesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type NamespacesCreateOrUpdateResponse = RelayNamespace;

/** Optional parameters. */
export declare interface NamespacesDeleteAuthorizationRuleOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface NamespacesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface NamespacesGetAuthorizationRuleOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getAuthorizationRule operation. */
export declare type NamespacesGetAuthorizationRuleResponse = AuthorizationRule;

/** Optional parameters. */
export declare interface NamespacesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type NamespacesGetResponse = RelayNamespace;

/** Optional parameters. */
export declare interface NamespacesListAuthorizationRulesNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAuthorizationRulesNext operation. */
export declare type NamespacesListAuthorizationRulesNextResponse = AuthorizationRuleListResult;

/** Optional parameters. */
export declare interface NamespacesListAuthorizationRulesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAuthorizationRules operation. */
export declare type NamespacesListAuthorizationRulesResponse = AuthorizationRuleListResult;

/** Optional parameters. */
export declare interface NamespacesListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type NamespacesListByResourceGroupNextResponse = RelayNamespaceListResult;

/** Optional parameters. */
export declare interface NamespacesListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type NamespacesListByResourceGroupResponse = RelayNamespaceListResult;

/** Optional parameters. */
export declare interface NamespacesListKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listKeys operation. */
export declare type NamespacesListKeysResponse = AccessKeys;

/** Optional parameters. */
export declare interface NamespacesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type NamespacesListNextResponse = RelayNamespaceListResult;

/** Optional parameters. */
export declare interface NamespacesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type NamespacesListResponse = RelayNamespaceListResult;

/** Optional parameters. */
export declare interface NamespacesRegenerateKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the regenerateKeys operation. */
export declare type NamespacesRegenerateKeysResponse = AccessKeys;

/** Optional parameters. */
export declare interface NamespacesUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type NamespacesUpdateResponse = RelayNamespace;

/** A Relay REST API operation. */
export declare interface Operation {
    /**
     * Operation name: {provider}/{resource}/{operation}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /** The object that represents the operation. */
    display?: OperationDisplay;
}

/** The object that represents the operation. */
export declare interface OperationDisplay {
    /**
     * Service provider: Relay.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provider?: string;
    /**
     * Resource on which the operation is performed: Invoice, etc.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resource?: string;
    /**
     * Operation type: Read, write, delete, etc.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operation?: string;
}

/** Result of the request to list Relay operations. It contains a list of operations and a URL link to get the next set of results. */
export declare interface OperationListResult {
    /**
     * List of Relay operations supported by resource provider.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Operation[];
    /**
     * URL to get the next set of operation list results if there are any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all available Relay REST API operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationListResult;

/** Defines values for ProvisioningStateEnum. */
export declare type ProvisioningStateEnum = "Created" | "Succeeded" | "Deleted" | "Failed" | "Updating" | "Unknown";

/** Parameters supplied to the regenerate authorization rule operation, specifies which key neeeds to be reset. */
export declare interface RegenerateAccessKeyParameters {
    /** The access key to regenerate. */
    keyType: KeyType_2;
    /** Optional. If the key value is provided, this is set to key type, or autogenerated key value set for key type. */
    key?: string;
}

export declare class RelayAPI extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the RelayAPI class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Subscription credentials which uniquely identify the Microsoft Azure
     *                       subscription. The subscription ID forms part of the URI for every service call.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: RelayAPIOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    operations: Operations;
    namespaces: Namespaces;
    hybridConnections: HybridConnections;
    wCFRelays: WCFRelays;
}

/** Optional parameters. */
export declare interface RelayAPIOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Description of a namespace resource. */
export declare interface RelayNamespace extends TrackedResource {
    /** SKU of the namespace. */
    sku?: Sku;
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly provisioningState?: ProvisioningStateEnum;
    /**
     * The time the namespace was created.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdAt?: Date;
    /**
     * The time the namespace was updated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly updatedAt?: Date;
    /**
     * Endpoint you can use to perform Service Bus operations.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serviceBusEndpoint?: string;
    /**
     * Identifier for Azure Insights metrics.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly metricId?: string;
}

/** The response from the list namespace operation. */
export declare interface RelayNamespaceListResult {
    /** Result of the list namespace operation. */
    value?: RelayNamespace[];
    /** Link to the next set of results. Not empty if value contains incomplete list of namespaces. */
    nextLink?: string;
}

/** Defines values for Relaytype. */
export declare type Relaytype = "NetTcp" | "Http";

/** Description of a namespace resource. */
export declare interface RelayUpdateParameters extends ResourceNamespacePatch {
    /** SKU of the namespace. */
    sku?: Sku;
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly provisioningState?: ProvisioningStateEnum;
    /**
     * The time the namespace was created.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdAt?: Date;
    /**
     * The time the namespace was updated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly updatedAt?: Date;
    /**
     * Endpoint you can use to perform Service Bus operations.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serviceBusEndpoint?: string;
    /**
     * Identifier for Azure Insights metrics.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly metricId?: string;
}

/** The resource definition. */
export declare interface Resource {
    /**
     * Resource ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Resource name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** Definition of resource. */
export declare interface ResourceNamespacePatch extends Resource {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
}

/** SKU of the namespace. */
export declare interface Sku {
    /** Name of this SKU. */
    name: "Standard";
    /** The tier of this SKU. */
    tier?: "Standard";
}

/** Definition of resource. */
export declare interface TrackedResource extends Resource {
    /** Resource location. */
    location: string;
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
}

/** Defines values for UnavailableReason. */
export declare type UnavailableReason = "None" | "InvalidName" | "SubscriptionIsDisabled" | "NameInUse" | "NameInLockdown" | "TooManyNamespaceInCurrentSubscription";

/** Description of the WCF relay resource. */
export declare interface WcfRelay extends Resource {
    /**
     * Returns true if the relay is dynamic; otherwise, false.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isDynamic?: boolean;
    /**
     * The time the WCF relay was created.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdAt?: Date;
    /**
     * The time the namespace was updated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly updatedAt?: Date;
    /**
     * The number of listeners for this relay. Note that min :1 and max:25 are supported.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly listenerCount?: number;
    /** WCF relay type. */
    relayType?: Relaytype;
    /** Returns true if client authorization is needed for this relay; otherwise, false. */
    requiresClientAuthorization?: boolean;
    /** Returns true if transport security is needed for this relay; otherwise, false. */
    requiresTransportSecurity?: boolean;
    /** The usermetadata is a placeholder to store user-defined string data for the WCF Relay endpoint. For example, it can be used to store descriptive data, such as list of teams and their contact information. Also, user-defined configuration settings can be stored. */
    userMetadata?: string;
}

/** Interface representing a WCFRelays. */
export declare interface WCFRelays {
    /**
     * Lists the WCF relays within the namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    listByNamespace(resourceGroupName: string, namespaceName: string, options?: WCFRelaysListByNamespaceOptionalParams): PagedAsyncIterableIterator<WcfRelay>;
    /**
     * Authorization rules for a WCF relay.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param relayName The relay name.
     * @param options The options parameters.
     */
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, relayName: string, options?: WCFRelaysListAuthorizationRulesOptionalParams): PagedAsyncIterableIterator<AuthorizationRule>;
    /**
     * Creates or updates a WCF relay. This operation is idempotent.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param relayName The relay name.
     * @param parameters Parameters supplied to create a WCF relay.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, relayName: string, parameters: WcfRelay, options?: WCFRelaysCreateOrUpdateOptionalParams): Promise<WCFRelaysCreateOrUpdateResponse>;
    /**
     * Deletes a WCF relay.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param relayName The relay name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, namespaceName: string, relayName: string, options?: WCFRelaysDeleteOptionalParams): Promise<void>;
    /**
     * Returns the description for the specified WCF relay.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param relayName The relay name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, namespaceName: string, relayName: string, options?: WCFRelaysGetOptionalParams): Promise<WCFRelaysGetResponse>;
    /**
     * Creates or updates an authorization rule for a WCF relay.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param relayName The relay name.
     * @param authorizationRuleName The authorization rule name.
     * @param parameters The authorization rule parameters.
     * @param options The options parameters.
     */
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, relayName: string, authorizationRuleName: string, parameters: AuthorizationRule, options?: WCFRelaysCreateOrUpdateAuthorizationRuleOptionalParams): Promise<WCFRelaysCreateOrUpdateAuthorizationRuleResponse>;
    /**
     * Deletes a WCF relay authorization rule.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param relayName The relay name.
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, relayName: string, authorizationRuleName: string, options?: WCFRelaysDeleteAuthorizationRuleOptionalParams): Promise<void>;
    /**
     * Get authorizationRule for a WCF relay by name.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param relayName The relay name.
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, relayName: string, authorizationRuleName: string, options?: WCFRelaysGetAuthorizationRuleOptionalParams): Promise<WCFRelaysGetAuthorizationRuleResponse>;
    /**
     * Primary and secondary connection strings to the WCF relay.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param relayName The relay name.
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    listKeys(resourceGroupName: string, namespaceName: string, relayName: string, authorizationRuleName: string, options?: WCFRelaysListKeysOptionalParams): Promise<WCFRelaysListKeysResponse>;
    /**
     * Regenerates the primary or secondary connection strings to the WCF relay.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param relayName The relay name.
     * @param authorizationRuleName The authorization rule name.
     * @param parameters Parameters supplied to regenerate authorization rule.
     * @param options The options parameters.
     */
    regenerateKeys(resourceGroupName: string, namespaceName: string, relayName: string, authorizationRuleName: string, parameters: RegenerateAccessKeyParameters, options?: WCFRelaysRegenerateKeysOptionalParams): Promise<WCFRelaysRegenerateKeysResponse>;
}

/** Optional parameters. */
export declare interface WCFRelaysCreateOrUpdateAuthorizationRuleOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdateAuthorizationRule operation. */
export declare type WCFRelaysCreateOrUpdateAuthorizationRuleResponse = AuthorizationRule;

/** Optional parameters. */
export declare interface WCFRelaysCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type WCFRelaysCreateOrUpdateResponse = WcfRelay;

/** Optional parameters. */
export declare interface WCFRelaysDeleteAuthorizationRuleOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface WCFRelaysDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface WCFRelaysGetAuthorizationRuleOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getAuthorizationRule operation. */
export declare type WCFRelaysGetAuthorizationRuleResponse = AuthorizationRule;

/** Optional parameters. */
export declare interface WCFRelaysGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type WCFRelaysGetResponse = WcfRelay;

/** Optional parameters. */
export declare interface WCFRelaysListAuthorizationRulesNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAuthorizationRulesNext operation. */
export declare type WCFRelaysListAuthorizationRulesNextResponse = AuthorizationRuleListResult;

/** Optional parameters. */
export declare interface WCFRelaysListAuthorizationRulesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAuthorizationRules operation. */
export declare type WCFRelaysListAuthorizationRulesResponse = AuthorizationRuleListResult;

/** Optional parameters. */
export declare interface WCFRelaysListByNamespaceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByNamespaceNext operation. */
export declare type WCFRelaysListByNamespaceNextResponse = WcfRelaysListResult;

/** Optional parameters. */
export declare interface WCFRelaysListByNamespaceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByNamespace operation. */
export declare type WCFRelaysListByNamespaceResponse = WcfRelaysListResult;

/** Optional parameters. */
export declare interface WCFRelaysListKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listKeys operation. */
export declare type WCFRelaysListKeysResponse = AccessKeys;

/** The response of the list WCF relay operation. */
export declare interface WcfRelaysListResult {
    /** Result of the list WCF relay operation. */
    value?: WcfRelay[];
    /** Link to the next set of results. Not empty if value contains incomplete list of WCF relays. */
    nextLink?: string;
}

/** Optional parameters. */
export declare interface WCFRelaysRegenerateKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the regenerateKeys operation. */
export declare type WCFRelaysRegenerateKeysResponse = AccessKeys;

export { }
